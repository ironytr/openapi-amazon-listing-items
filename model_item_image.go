/*
Selling Partner API for Listings Items

The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).

API version: 2021-08-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ItemImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemImage{}

// ItemImage Image for the listings item.
type ItemImage struct {
	// Link, or URL, for the image.
	Link string `json:"link"`
	// Height of the image in pixels.
	Height int32 `json:"height"`
	// Width of the image in pixels.
	Width int32 `json:"width"`
}

type _ItemImage ItemImage

// NewItemImage instantiates a new ItemImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemImage(link string, height int32, width int32) *ItemImage {
	this := ItemImage{}
	this.Link = link
	this.Height = height
	this.Width = width
	return &this
}

// NewItemImageWithDefaults instantiates a new ItemImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemImageWithDefaults() *ItemImage {
	this := ItemImage{}
	return &this
}

// GetLink returns the Link field value
func (o *ItemImage) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *ItemImage) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *ItemImage) SetLink(v string) {
	o.Link = v
}

// GetHeight returns the Height field value
func (o *ItemImage) GetHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *ItemImage) GetHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *ItemImage) SetHeight(v int32) {
	o.Height = v
}

// GetWidth returns the Width field value
func (o *ItemImage) GetWidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *ItemImage) GetWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *ItemImage) SetWidth(v int32) {
	o.Width = v
}

func (o ItemImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["link"] = o.Link
	toSerialize["height"] = o.Height
	toSerialize["width"] = o.Width
	return toSerialize, nil
}

func (o *ItemImage) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"link",
		"height",
		"width",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varItemImage := _ItemImage{}

	err = json.Unmarshal(bytes, &varItemImage)

	if err != nil {
		return err
	}

	*o = ItemImage(varItemImage)

	return err
}

type NullableItemImage struct {
	value *ItemImage
	isSet bool
}

func (v NullableItemImage) Get() *ItemImage {
	return v.value
}

func (v *NullableItemImage) Set(val *ItemImage) {
	v.value = val
	v.isSet = true
}

func (v NullableItemImage) IsSet() bool {
	return v.isSet
}

func (v *NullableItemImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemImage(val *ItemImage) *NullableItemImage {
	return &NullableItemImage{value: val, isSet: true}
}

func (v NullableItemImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


