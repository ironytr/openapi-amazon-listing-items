/*
Selling Partner API for Listings Items

The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).

API version: 2021-08-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Item type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Item{}

// Item A listings item.
type Item struct {
	// A selling partner provided identifier for an Amazon listing.
	Sku string `json:"sku"`
	// Summary details of a listings item.
	Summaries []ItemSummaryByMarketplace `json:"summaries,omitempty"`
	// JSON object containing structured listings item attribute data keyed by attribute name.
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	// Issues associated with the listings item.
	Issues []Issue `json:"issues,omitempty"`
	// Offer details for the listings item.
	Offers []ItemOfferByMarketplace `json:"offers,omitempty"`
	// Fulfillment availability for the listings item.
	FulfillmentAvailability []FulfillmentAvailability `json:"fulfillmentAvailability,omitempty"`
	// Vendor procurement information for the listings item.
	Procurement []ItemProcurement `json:"procurement,omitempty"`
}

type _Item Item

// NewItem instantiates a new Item object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItem(sku string) *Item {
	this := Item{}
	this.Sku = sku
	return &this
}

// NewItemWithDefaults instantiates a new Item object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemWithDefaults() *Item {
	this := Item{}
	return &this
}

// GetSku returns the Sku field value
func (o *Item) GetSku() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sku
}

// GetSkuOk returns a tuple with the Sku field value
// and a boolean to check if the value has been set.
func (o *Item) GetSkuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sku, true
}

// SetSku sets field value
func (o *Item) SetSku(v string) {
	o.Sku = v
}

// GetSummaries returns the Summaries field value if set, zero value otherwise.
func (o *Item) GetSummaries() []ItemSummaryByMarketplace {
	if o == nil || IsNil(o.Summaries) {
		var ret []ItemSummaryByMarketplace
		return ret
	}
	return o.Summaries
}

// GetSummariesOk returns a tuple with the Summaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetSummariesOk() ([]ItemSummaryByMarketplace, bool) {
	if o == nil || IsNil(o.Summaries) {
		return nil, false
	}
	return o.Summaries, true
}

// HasSummaries returns a boolean if a field has been set.
func (o *Item) HasSummaries() bool {
	if o != nil && !IsNil(o.Summaries) {
		return true
	}

	return false
}

// SetSummaries gets a reference to the given []ItemSummaryByMarketplace and assigns it to the Summaries field.
func (o *Item) SetSummaries(v []ItemSummaryByMarketplace) {
	o.Summaries = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Item) GetAttributes() map[string]interface{} {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Item) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *Item) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetIssues returns the Issues field value if set, zero value otherwise.
func (o *Item) GetIssues() []Issue {
	if o == nil || IsNil(o.Issues) {
		var ret []Issue
		return ret
	}
	return o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetIssuesOk() ([]Issue, bool) {
	if o == nil || IsNil(o.Issues) {
		return nil, false
	}
	return o.Issues, true
}

// HasIssues returns a boolean if a field has been set.
func (o *Item) HasIssues() bool {
	if o != nil && !IsNil(o.Issues) {
		return true
	}

	return false
}

// SetIssues gets a reference to the given []Issue and assigns it to the Issues field.
func (o *Item) SetIssues(v []Issue) {
	o.Issues = v
}

// GetOffers returns the Offers field value if set, zero value otherwise.
func (o *Item) GetOffers() []ItemOfferByMarketplace {
	if o == nil || IsNil(o.Offers) {
		var ret []ItemOfferByMarketplace
		return ret
	}
	return o.Offers
}

// GetOffersOk returns a tuple with the Offers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetOffersOk() ([]ItemOfferByMarketplace, bool) {
	if o == nil || IsNil(o.Offers) {
		return nil, false
	}
	return o.Offers, true
}

// HasOffers returns a boolean if a field has been set.
func (o *Item) HasOffers() bool {
	if o != nil && !IsNil(o.Offers) {
		return true
	}

	return false
}

// SetOffers gets a reference to the given []ItemOfferByMarketplace and assigns it to the Offers field.
func (o *Item) SetOffers(v []ItemOfferByMarketplace) {
	o.Offers = v
}

// GetFulfillmentAvailability returns the FulfillmentAvailability field value if set, zero value otherwise.
func (o *Item) GetFulfillmentAvailability() []FulfillmentAvailability {
	if o == nil || IsNil(o.FulfillmentAvailability) {
		var ret []FulfillmentAvailability
		return ret
	}
	return o.FulfillmentAvailability
}

// GetFulfillmentAvailabilityOk returns a tuple with the FulfillmentAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetFulfillmentAvailabilityOk() ([]FulfillmentAvailability, bool) {
	if o == nil || IsNil(o.FulfillmentAvailability) {
		return nil, false
	}
	return o.FulfillmentAvailability, true
}

// HasFulfillmentAvailability returns a boolean if a field has been set.
func (o *Item) HasFulfillmentAvailability() bool {
	if o != nil && !IsNil(o.FulfillmentAvailability) {
		return true
	}

	return false
}

// SetFulfillmentAvailability gets a reference to the given []FulfillmentAvailability and assigns it to the FulfillmentAvailability field.
func (o *Item) SetFulfillmentAvailability(v []FulfillmentAvailability) {
	o.FulfillmentAvailability = v
}

// GetProcurement returns the Procurement field value if set, zero value otherwise.
func (o *Item) GetProcurement() []ItemProcurement {
	if o == nil || IsNil(o.Procurement) {
		var ret []ItemProcurement
		return ret
	}
	return o.Procurement
}

// GetProcurementOk returns a tuple with the Procurement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetProcurementOk() ([]ItemProcurement, bool) {
	if o == nil || IsNil(o.Procurement) {
		return nil, false
	}
	return o.Procurement, true
}

// HasProcurement returns a boolean if a field has been set.
func (o *Item) HasProcurement() bool {
	if o != nil && !IsNil(o.Procurement) {
		return true
	}

	return false
}

// SetProcurement gets a reference to the given []ItemProcurement and assigns it to the Procurement field.
func (o *Item) SetProcurement(v []ItemProcurement) {
	o.Procurement = v
}

func (o Item) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Item) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sku"] = o.Sku
	if !IsNil(o.Summaries) {
		toSerialize["summaries"] = o.Summaries
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Issues) {
		toSerialize["issues"] = o.Issues
	}
	if !IsNil(o.Offers) {
		toSerialize["offers"] = o.Offers
	}
	if !IsNil(o.FulfillmentAvailability) {
		toSerialize["fulfillmentAvailability"] = o.FulfillmentAvailability
	}
	if !IsNil(o.Procurement) {
		toSerialize["procurement"] = o.Procurement
	}
	return toSerialize, nil
}

func (o *Item) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sku",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varItem := _Item{}

	err = json.Unmarshal(bytes, &varItem)

	if err != nil {
		return err
	}

	*o = Item(varItem)

	return err
}

type NullableItem struct {
	value *Item
	isSet bool
}

func (v NullableItem) Get() *Item {
	return v.value
}

func (v *NullableItem) Set(val *Item) {
	v.value = val
	v.isSet = true
}

func (v NullableItem) IsSet() bool {
	return v.isSet
}

func (v *NullableItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItem(val *Item) *NullableItem {
	return &NullableItem{value: val, isSet: true}
}

func (v NullableItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


