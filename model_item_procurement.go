/*
Selling Partner API for Listings Items

The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).

API version: 2021-08-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ItemProcurement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemProcurement{}

// ItemProcurement Vendor procurement information for the listings item.
type ItemProcurement struct {
	CostPrice Money `json:"costPrice"`
}

type _ItemProcurement ItemProcurement

// NewItemProcurement instantiates a new ItemProcurement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemProcurement(costPrice Money) *ItemProcurement {
	this := ItemProcurement{}
	this.CostPrice = costPrice
	return &this
}

// NewItemProcurementWithDefaults instantiates a new ItemProcurement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemProcurementWithDefaults() *ItemProcurement {
	this := ItemProcurement{}
	return &this
}

// GetCostPrice returns the CostPrice field value
func (o *ItemProcurement) GetCostPrice() Money {
	if o == nil {
		var ret Money
		return ret
	}

	return o.CostPrice
}

// GetCostPriceOk returns a tuple with the CostPrice field value
// and a boolean to check if the value has been set.
func (o *ItemProcurement) GetCostPriceOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CostPrice, true
}

// SetCostPrice sets field value
func (o *ItemProcurement) SetCostPrice(v Money) {
	o.CostPrice = v
}

func (o ItemProcurement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemProcurement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["costPrice"] = o.CostPrice
	return toSerialize, nil
}

func (o *ItemProcurement) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"costPrice",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varItemProcurement := _ItemProcurement{}

	err = json.Unmarshal(bytes, &varItemProcurement)

	if err != nil {
		return err
	}

	*o = ItemProcurement(varItemProcurement)

	return err
}

type NullableItemProcurement struct {
	value *ItemProcurement
	isSet bool
}

func (v NullableItemProcurement) Get() *ItemProcurement {
	return v.value
}

func (v *NullableItemProcurement) Set(val *ItemProcurement) {
	v.value = val
	v.isSet = true
}

func (v NullableItemProcurement) IsSet() bool {
	return v.isSet
}

func (v *NullableItemProcurement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemProcurement(val *ItemProcurement) *NullableItemProcurement {
	return &NullableItemProcurement{value: val, isSet: true}
}

func (v NullableItemProcurement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemProcurement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


