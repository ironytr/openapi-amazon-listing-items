/*
Selling Partner API for Listings Items

The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).

API version: 2021-08-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ItemSummaryByMarketplace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemSummaryByMarketplace{}

// ItemSummaryByMarketplace Summary details of a listings item for an Amazon marketplace.
type ItemSummaryByMarketplace struct {
	// A marketplace identifier. Identifies the Amazon marketplace for the listings item.
	MarketplaceId string `json:"marketplaceId"`
	// Amazon Standard Identification Number (ASIN) of the listings item.
	Asin string `json:"asin"`
	// The Amazon product type of the listings item.
	ProductType string `json:"productType"`
	// Identifies the condition of the listings item.
	ConditionType *string `json:"conditionType,omitempty"`
	// Statuses that apply to the listings item.
	Status []string `json:"status"`
	// Fulfillment network stock keeping unit is an identifier used by Amazon fulfillment centers to identify each unique item.
	FnSku *string `json:"fnSku,omitempty"`
	// Name, or title, associated with an Amazon catalog item.
	ItemName string `json:"itemName"`
	// Date the listings item was created, in ISO 8601 format.
	CreatedDate time.Time `json:"createdDate"`
	// Date the listings item was last updated, in ISO 8601 format.
	LastUpdatedDate time.Time `json:"lastUpdatedDate"`
	MainImage *ItemImage `json:"mainImage,omitempty"`
}

type _ItemSummaryByMarketplace ItemSummaryByMarketplace

// NewItemSummaryByMarketplace instantiates a new ItemSummaryByMarketplace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemSummaryByMarketplace(marketplaceId string, asin string, productType string, status []string, itemName string, createdDate time.Time, lastUpdatedDate time.Time) *ItemSummaryByMarketplace {
	this := ItemSummaryByMarketplace{}
	this.MarketplaceId = marketplaceId
	this.Asin = asin
	this.ProductType = productType
	this.Status = status
	this.ItemName = itemName
	this.CreatedDate = createdDate
	this.LastUpdatedDate = lastUpdatedDate
	return &this
}

// NewItemSummaryByMarketplaceWithDefaults instantiates a new ItemSummaryByMarketplace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemSummaryByMarketplaceWithDefaults() *ItemSummaryByMarketplace {
	this := ItemSummaryByMarketplace{}
	return &this
}

// GetMarketplaceId returns the MarketplaceId field value
func (o *ItemSummaryByMarketplace) GetMarketplaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MarketplaceId
}

// GetMarketplaceIdOk returns a tuple with the MarketplaceId field value
// and a boolean to check if the value has been set.
func (o *ItemSummaryByMarketplace) GetMarketplaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MarketplaceId, true
}

// SetMarketplaceId sets field value
func (o *ItemSummaryByMarketplace) SetMarketplaceId(v string) {
	o.MarketplaceId = v
}

// GetAsin returns the Asin field value
func (o *ItemSummaryByMarketplace) GetAsin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Asin
}

// GetAsinOk returns a tuple with the Asin field value
// and a boolean to check if the value has been set.
func (o *ItemSummaryByMarketplace) GetAsinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asin, true
}

// SetAsin sets field value
func (o *ItemSummaryByMarketplace) SetAsin(v string) {
	o.Asin = v
}

// GetProductType returns the ProductType field value
func (o *ItemSummaryByMarketplace) GetProductType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value
// and a boolean to check if the value has been set.
func (o *ItemSummaryByMarketplace) GetProductTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductType, true
}

// SetProductType sets field value
func (o *ItemSummaryByMarketplace) SetProductType(v string) {
	o.ProductType = v
}

// GetConditionType returns the ConditionType field value if set, zero value otherwise.
func (o *ItemSummaryByMarketplace) GetConditionType() string {
	if o == nil || IsNil(o.ConditionType) {
		var ret string
		return ret
	}
	return *o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummaryByMarketplace) GetConditionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConditionType) {
		return nil, false
	}
	return o.ConditionType, true
}

// HasConditionType returns a boolean if a field has been set.
func (o *ItemSummaryByMarketplace) HasConditionType() bool {
	if o != nil && !IsNil(o.ConditionType) {
		return true
	}

	return false
}

// SetConditionType gets a reference to the given string and assigns it to the ConditionType field.
func (o *ItemSummaryByMarketplace) SetConditionType(v string) {
	o.ConditionType = &v
}

// GetStatus returns the Status field value
func (o *ItemSummaryByMarketplace) GetStatus() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ItemSummaryByMarketplace) GetStatusOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status, true
}

// SetStatus sets field value
func (o *ItemSummaryByMarketplace) SetStatus(v []string) {
	o.Status = v
}

// GetFnSku returns the FnSku field value if set, zero value otherwise.
func (o *ItemSummaryByMarketplace) GetFnSku() string {
	if o == nil || IsNil(o.FnSku) {
		var ret string
		return ret
	}
	return *o.FnSku
}

// GetFnSkuOk returns a tuple with the FnSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummaryByMarketplace) GetFnSkuOk() (*string, bool) {
	if o == nil || IsNil(o.FnSku) {
		return nil, false
	}
	return o.FnSku, true
}

// HasFnSku returns a boolean if a field has been set.
func (o *ItemSummaryByMarketplace) HasFnSku() bool {
	if o != nil && !IsNil(o.FnSku) {
		return true
	}

	return false
}

// SetFnSku gets a reference to the given string and assigns it to the FnSku field.
func (o *ItemSummaryByMarketplace) SetFnSku(v string) {
	o.FnSku = &v
}

// GetItemName returns the ItemName field value
func (o *ItemSummaryByMarketplace) GetItemName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemName
}

// GetItemNameOk returns a tuple with the ItemName field value
// and a boolean to check if the value has been set.
func (o *ItemSummaryByMarketplace) GetItemNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemName, true
}

// SetItemName sets field value
func (o *ItemSummaryByMarketplace) SetItemName(v string) {
	o.ItemName = v
}

// GetCreatedDate returns the CreatedDate field value
func (o *ItemSummaryByMarketplace) GetCreatedDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value
// and a boolean to check if the value has been set.
func (o *ItemSummaryByMarketplace) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedDate, true
}

// SetCreatedDate sets field value
func (o *ItemSummaryByMarketplace) SetCreatedDate(v time.Time) {
	o.CreatedDate = v
}

// GetLastUpdatedDate returns the LastUpdatedDate field value
func (o *ItemSummaryByMarketplace) GetLastUpdatedDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdatedDate
}

// GetLastUpdatedDateOk returns a tuple with the LastUpdatedDate field value
// and a boolean to check if the value has been set.
func (o *ItemSummaryByMarketplace) GetLastUpdatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdatedDate, true
}

// SetLastUpdatedDate sets field value
func (o *ItemSummaryByMarketplace) SetLastUpdatedDate(v time.Time) {
	o.LastUpdatedDate = v
}

// GetMainImage returns the MainImage field value if set, zero value otherwise.
func (o *ItemSummaryByMarketplace) GetMainImage() ItemImage {
	if o == nil || IsNil(o.MainImage) {
		var ret ItemImage
		return ret
	}
	return *o.MainImage
}

// GetMainImageOk returns a tuple with the MainImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummaryByMarketplace) GetMainImageOk() (*ItemImage, bool) {
	if o == nil || IsNil(o.MainImage) {
		return nil, false
	}
	return o.MainImage, true
}

// HasMainImage returns a boolean if a field has been set.
func (o *ItemSummaryByMarketplace) HasMainImage() bool {
	if o != nil && !IsNil(o.MainImage) {
		return true
	}

	return false
}

// SetMainImage gets a reference to the given ItemImage and assigns it to the MainImage field.
func (o *ItemSummaryByMarketplace) SetMainImage(v ItemImage) {
	o.MainImage = &v
}

func (o ItemSummaryByMarketplace) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemSummaryByMarketplace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["marketplaceId"] = o.MarketplaceId
	toSerialize["asin"] = o.Asin
	toSerialize["productType"] = o.ProductType
	if !IsNil(o.ConditionType) {
		toSerialize["conditionType"] = o.ConditionType
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.FnSku) {
		toSerialize["fnSku"] = o.FnSku
	}
	toSerialize["itemName"] = o.ItemName
	toSerialize["createdDate"] = o.CreatedDate
	toSerialize["lastUpdatedDate"] = o.LastUpdatedDate
	if !IsNil(o.MainImage) {
		toSerialize["mainImage"] = o.MainImage
	}
	return toSerialize, nil
}

func (o *ItemSummaryByMarketplace) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"marketplaceId",
		"asin",
		"productType",
		"status",
		"itemName",
		"createdDate",
		"lastUpdatedDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varItemSummaryByMarketplace := _ItemSummaryByMarketplace{}

	err = json.Unmarshal(bytes, &varItemSummaryByMarketplace)

	if err != nil {
		return err
	}

	*o = ItemSummaryByMarketplace(varItemSummaryByMarketplace)

	return err
}

type NullableItemSummaryByMarketplace struct {
	value *ItemSummaryByMarketplace
	isSet bool
}

func (v NullableItemSummaryByMarketplace) Get() *ItemSummaryByMarketplace {
	return v.value
}

func (v *NullableItemSummaryByMarketplace) Set(val *ItemSummaryByMarketplace) {
	v.value = val
	v.isSet = true
}

func (v NullableItemSummaryByMarketplace) IsSet() bool {
	return v.isSet
}

func (v *NullableItemSummaryByMarketplace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemSummaryByMarketplace(val *ItemSummaryByMarketplace) *NullableItemSummaryByMarketplace {
	return &NullableItemSummaryByMarketplace{value: val, isSet: true}
}

func (v NullableItemSummaryByMarketplace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemSummaryByMarketplace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


