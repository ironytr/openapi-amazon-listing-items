/*
Selling Partner API for Listings Items

The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).

API version: 2021-08-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Points type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Points{}

// Points The number of Amazon Points offered with the purchase of an item, and their monetary value. Note that the Points element is only returned in Japan (JP).
type Points struct {
	PointsNumber int32 `json:"pointsNumber"`
}

type _Points Points

// NewPoints instantiates a new Points object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoints(pointsNumber int32) *Points {
	this := Points{}
	this.PointsNumber = pointsNumber
	return &this
}

// NewPointsWithDefaults instantiates a new Points object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPointsWithDefaults() *Points {
	this := Points{}
	return &this
}

// GetPointsNumber returns the PointsNumber field value
func (o *Points) GetPointsNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PointsNumber
}

// GetPointsNumberOk returns a tuple with the PointsNumber field value
// and a boolean to check if the value has been set.
func (o *Points) GetPointsNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PointsNumber, true
}

// SetPointsNumber sets field value
func (o *Points) SetPointsNumber(v int32) {
	o.PointsNumber = v
}

func (o Points) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Points) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pointsNumber"] = o.PointsNumber
	return toSerialize, nil
}

func (o *Points) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pointsNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPoints := _Points{}

	err = json.Unmarshal(bytes, &varPoints)

	if err != nil {
		return err
	}

	*o = Points(varPoints)

	return err
}

type NullablePoints struct {
	value *Points
	isSet bool
}

func (v NullablePoints) Get() *Points {
	return v.value
}

func (v *NullablePoints) Set(val *Points) {
	v.value = val
	v.isSet = true
}

func (v NullablePoints) IsSet() bool {
	return v.isSet
}

func (v *NullablePoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoints(val *Points) *NullablePoints {
	return &NullablePoints{value: val, isSet: true}
}

func (v NullablePoints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


